#!/usr/bin/python3

import os
import sys
import logging
import argparse

from pkg_resources import resource_string as resource_bytes
from ubuntu_image import *
from ubuntu_image.builder import ModelAssertionBuilder
from ubuntu_image.i18n import _


_logger = logging.getLogger('ubuntu-image')
try:
    __version__ = resource_bytes('ubuntu_image', 'version.txt').decode('utf-8')
except FileNotFoundError:                           # pragma: no cover
    # Probably, setup.py hasn't been run yet to generate the version.txt.
    __version__ = 'dev'
PROGRAM = 'ubuntu-image-finalize'

def parseargs(argv=None):
    parser = argparse.ArgumentParser(
        prog=PROGRAM,
        description=_('Generate a bootable disk image from an unpacked tree.'),
        )
    parser.add_argument('--version', action='version',
                        version='{} {}'.format(PROGRAM, __version__))
    parser.add_argument('-d', '--debug',
                        default=False, action='store_true',
                        help=_('Enable debugging output'))
    parser.add_argument('-k', '--keep',
                        default=False, action='store_true',
                        help=_('Keep (and print) temporary directories'))
    parser.add_argument('-c', '--channel',
                        default=None,
                        help=_('For snap-based images, the channel to use'))
    parser.add_argument('-o', '--output',
                        default=None,
                        help=_('The output file for the disk image'))
    parser.add_argument('-i', '--input-dir',
                        default='input-dir',
                        help=_('Input tree to process, containing root and '
                               + 'gadget subdirs'))
    parser.add_argument('-w', '--workdir',
                        default=None,
                        help=_("""The working directory in which to download
                        and unpack all the source files for the image.  This
                        directory can exist or not, and it is not removed
                        after this program exits.  If not given, a temporary
                        working directory is used instead, which *is* deleted
                        after this program exits."""))
    parser.add_argument('model_assertion',
                        help=_('Path to the model assertion'))
    args = parser.parse_args(argv)
    if args.debug:
        logging.basicConfig(level=logging.DEBUG)
    return args


def main(argv=None):
    args = parseargs(argv)
    state_machine = ModelAssertionBuilder(args)
    state_machine.unpackdir = os.path.join(args.input_dir, 'unpack')
    state_machine.rootfs    = os.path.join(args.input_dir, 'root')
    state_machine.bootfs    = os.path.join(args.input_dir, 'boot')
    state_machine._pop()
    state_machine._next.append(state_machine.load_gadget_yaml)

    try:
        list(state_machine)
    except:
        _logger.exception('Crash in state machine')
        return 1
    else:
        return 0


if __name__ == '__main__':                          # pragma: nocover
    sys.exit(main())

